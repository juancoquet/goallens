import enum


class Analyst:

    def check_prediction_outcomes(self, prediction: dict):
        """check the outcomes of a prediction.
        reads the probabilities forecasted for each number of goals for home and away teams,
        and compares them to the actual result of the fixture.
                
        Args:
            prediction (dict): the prediction to check. Note that this isn't a predictions.models.Prediction
            object, its the dict returned by the Predictor.generate_prediction method.
        Returns:
            dict: a dict of the form {'0_goals': {'home': 0, 'away': 0}, ...} where the keys are the number of
            goals and the values are a dictionary that maps 'home' and 'away' to 0 or 1 depending on whether
            the prediction was correct or not.
        """
        fixture = prediction['fixture']
        del prediction['fixture']
        del prediction['forecast_xGs']
        del prediction['likely_scoreline']

        outcomes = {}
        for goals, _ in enumerate(prediction.keys()):
            this_outcome = {'home': 0, 'away': 0}
            if goals == fixture.goals_home:
                this_outcome['home'] = 1
            if goals == fixture.goals_away:
                this_outcome['away'] = 1
            outcomes[f'{goals}_goals'] = this_outcome
        
        return outcomes

    def _combine_predictions_and_outcomes(self, prediction: dict, outcomes: dict):
        """combines forecast probabilities for a prediction's goal events with their 
        respective outcome.
        
        Args:
            prediction (dict): the prediction to check. Note that this isn't a predictions.models.Prediction
            object, its the dict returned by the Predictor.generate_prediction method.
            outcomes (dict): the outcomes of the predictions, as generated by Analyst.check_prediction_outcomes().
        Returns:
            dict: a dict that maps each prediction's forecast probability to its respective outcome (0 or 1). e.g.
            {0.2173: 0, 0.4137: 1, ...}
        """
        del prediction['fixture']
        del prediction['forecast_xGs']
        del prediction['likely_scoreline']

        combined = {}
        for probs, outcome in zip(prediction.values(), outcomes.values()):
            home_prob = probs['home']
            home_outcome = outcome['home']
            away_prob = probs['away']
            away_outcome = outcome['away']
            combined[home_prob] = home_outcome
            combined[away_prob] = away_outcome

        return combined